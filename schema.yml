openapi: 3.0.3
info:
  title: Bookstore API
  version: 0.0.0
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /auth/profile/{id}/:
    get:
      operationId: auth_profile_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /author/:
    get:
      operationId: author_retrieve
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
  /author/{id}/:
    get:
      operationId: author_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
  /book/:
    get:
      operationId: book_retrieve
      summary: Get all books
      tags:
      - book
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    post:
      operationId: book_create
      summary: Create a book
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookDetails'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetails'
          description: ''
  /book/{id}/:
    get:
      operationId: book_retrieve_2
      summary: Get a book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetails'
          description: ''
    put:
      operationId: book_update
      summary: Update a book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookDetails'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetails'
          description: ''
    delete:
      operationId: book_destroy
      summary: Delete a book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /book/{slug}/:
    get:
      operationId: book_retrieve_3
      summary: Get a book by slug
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - book
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetails'
          description: ''
  /genre/:
    get:
      operationId: genre_retrieve
      tags:
      - genre
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /genre/{id}/:
    get:
      operationId: genre_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - genre
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /publisher/:
    get:
      operationId: publisher_retrieve
      tags:
      - publisher
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
          description: ''
  /publisher/{id}/:
    get:
      operationId: publisher_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - publisher
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
          description: ''
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 255
      required:
      - email
      - id
      - name
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          nullable: true
          maxLength: 400
          pattern: ^[-a-zA-Z0-9_]+$
        image_url:
          type: string
          format: uri
          nullable: true
        price:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        book_type:
          allOf:
          - $ref: '#/components/schemas/BookTypeEnum'
          minimum: 0
          maximum: 4294967295
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - authors
      - genres
      - id
      - title
    BookDetails:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image_url:
          type: string
          format: uri
          nullable: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          nullable: true
          maxLength: 400
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          maxLength: 999
        pageCount:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        price:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
        published_date:
          type: string
          format: date
          nullable: true
        book_type:
          allOf:
          - $ref: '#/components/schemas/BookTypeEnum'
          minimum: 0
          maximum: 4294967295
        link:
          type: string
          format: uri
          nullable: true
        amount_in_stock:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
          nullable: true
        publisher:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - authors
      - genres
      - id
      - publisher
      - title
    BookTypeEnum:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: |-
        * `0` - Both
        * `1` - Physical
        * `2` - E-book
    Genre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 999
      required:
      - id
      - name
    Login:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 255
      required:
      - email
      - id
      - name
    Publisher:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        address:
          type: string
          maxLength: 255
        hotline:
          type: string
          maxLength: 12
      required:
      - id
      - name
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
      - password
      - profile
      - username
    UserProfile:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 255
        phone_number:
          type: string
          maxLength: 12
        address:
          type: string
          maxLength: 255
        avatar_url:
          type: string
          format: uri
          readOnly: true
          nullable: true
      required:
      - avatar_url
      - email
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
